<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <!-- 데이터베이스 연동 -->
    <context:component-scan base-package="com.sist.*"></context:component-scan>
    <!-- 페이지별 접근 권한 -->
    <http auto-config="true" use-expressions="true">
      <csrf disabled="true"/> <!-- 해킹 처리 : 사이트 위조 (파밍) -->
      <!-- 
          http://localhost/web/member/login.do
          permitAll : 누구나 접근이 가능
          hasRole('ROLE_ADMIN') => 한개만 적용
          hasAnyRole('ROLE_ADMIN','ROLE_USER')
       -->
      <intercept-url pattern="/member/**" access="permitAll"/>
      <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
      <intercept-url pattern="/**" access="permitAll"/>
      <intercept-url pattern="/member/login.do" access="permitAll"/>
      <!-- session관리 : Principal
           Principal => UserDetails => username,autority
           
           {
              private String username,id,password....
           }
           
           <input type="id" name="id">
           <input type="pwd" name="pwd">
           
           => String id=request.getParameter("id");
                     username
           => String pwd=request.getParameter("pwd");
                     password
           
           @GetMapping("member/login.do")
           public String login(String id,String pwd)
           {
               ...
               ...
               return "redirect:../main/main.do";
           }
       -->
       <form-login login-page="/member/login.do"
         login-processing-url="/member/login.do"
         username-parameter="id"
         password-parameter="pwd"
         default-target-url="/main/main.do"
         always-use-default-target="false"
         authentication-success-handler-ref="loginSuccessHandler"
         authentication-failure-handler-ref="loginFailureHandler"
       />
       <!-- 
         @GetMapping("member/logout.do")
         public String logout(HttpSession sesssion)
         {
            session.invalidate()
            return "redirect:../main/main.do"
         }
       
        -->
       <logout logout-url="/member/logout.do"
           invalidate-session="true"
           logout-success-url="/main/main.do"
           delete-cookies="remember-me,JSESSION_ID"
       /> <!-- logout.do 로 가면 로그아웃해라 -->
    </http>
    <beans:bean id="loginSuccessHandler" class="com.sist.security.LoginSuccessHandler">
      <beans:property name="defaultUrl" value="/main/main.do"/>
    </beans:bean>
    <beans:bean id="loginFailureHandler" class="com.sist.security.LoginFailureHandler">
      <beans:property name="defalutFailuerUrl" value="/member/login.do?login_error"/>
    </beans:bean>
    <!-- remember-me : 자동 로그인 처리 -->
    <!-- 데이터베이스 연동 -->
    <jdbc-user-service data-source-ref="ds"
      id="userService"
      users-by-username-query="SELECT userId as username, userPwd as password,enabled FROM Member WHERE userId=?"
      authorities-by-username-query="SELECT userId as username,authority FROM Authority WHERE userId=?"
    />
    
    <!-- 인증 데이터 전송 -->
    <authentication-manager>
      <authentication-provider user-service-ref="userService">
      
      </authentication-provider>
    </authentication-manager>
    <beans:bean id="bcrytEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></beans:bean>
</beans:beans>
